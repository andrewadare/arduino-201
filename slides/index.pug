extends layout

block title
  //- Page title (browser tab)
  title Arduino 201 @ SSD

block content
  div.reveal
    div.slides

      //- section(data-background-image='figs/ssd.jpeg')
      section
        h1 Arduino 201
        p(style='text-align: center;').
          #[span.ino-white #[strong Tips for your next project]]
        p(style='text-align: center;') Todd Lawall and Andrew Adare
        p(style='text-align: center;') December 1, 2016 @ Solid State Depot

        //- Notes: push 's' for speaker view
        aside.notes
          ul
            li Welcome
            li Format for session: ~45-60 min. presentation, then hands-on


      section
        h2 The Arduino IDE
        p Why we
        div.lefthalf
          p #[span.green Love it]:
          ul
            li Very approachable
            li Free and open
            li Community
            li Documentation
            li Diverse HW support
        div.righthalf
          p #[span.red Don't love it]:
          ul
            li Lousy editor
            li Not-quite-C++
            li Bad examples around
            li Code can be slow
            li #[code analogWrite]?
        br
        br
        p(style='text-align: center;') BTW: You didn't miss #[span.ino-white #[strong "Arduino 101"]] - we skipped it.
        aside.notes
          ul
            li We're assuming you have your IDE set up and have some basics down.
            li Many examples are fine for simple tasks, but don't scale well to multitasking projects.

      section
        h2 outline
        p #[span.ino-orange #[strong A few hardware preliminaries]]
          ul
            li Powering your project
            li Current considerations, large loads
            li Overview of MCU peripherals
        aside.notes
          ul
            li Hardware: how not to zap your pins, avoiding brownouts, electronics tips go here


      section
        h2 outline
        p #[span.ino-orange #[strong Host software]]
          ul
            li Using the Arduino CLI and your own editor
            li Writing custom library classes
            li Communicating externally
        aside.notes
          ul
            li Software: how I use the IDE as a toolchain in headless mode
            li Firmware: bulk of the talk spent here


      section
        h2 outline
        p #[span.ino-orange #[strong Firmware]]
          ul
            li Coding outside loop()
            li When and how to avoid delay()
            li Integer math: choosing datatypes and keeping precision
            li Interrupts
            li timer configuration and gotchas
            li AVR-specific hacks: registers, datasheet, AVR libc
            li Sleeping and WDT
        aside.notes
          ul
            li Firmware: bulk of the talk spent here


      section
        h2 outline
        p #[span.ino-orange #[strong 32-bit systems]]
          ul
            li Arduino and ESP8266
            li Teensyduino


      section
        h2 Powering your project
        p(style='text-align: center;') [Todd]


      section
        h2 Driving large loads
        p(style='text-align: center;') [up for grabs]


      section
        h2 MCU Hardware overview
        p Our specimen: ATMega 328P (Uno, Nano, Pro Mini, ...)
        ul
          li 20 GPIO pins, all with pin-change interrupt support
          li 3 Timer/counter units: 0 (8 bit), 1 (16 bit), 2 (8 bit)
          li 6 PWM channels
          li 1 A/D converter (10 bits, 6 channels)
          li Serial peripherals: I2C, SPI, and USART


      section
        img(data-src="figs/atmega328-pinout.png")


      section
        h2 Responding to changes
        h4 The polling approach
        p Consider the #[a(href="https://www.arduino.cc/en/Tutorial/StateChangeDetection") stateChangeDetection] example:
        pre
          code.cpp.
            void loop() {
              buttonState = digitalRead(buttonPin);
              if (buttonState != lastButtonState) {
                // Conditional logic here (LOW-HIGH vs. HIGH-LOW)...
              }
              lastButtonState = buttonState;
              // Possibly several other tasks here....
            }
        div.lefthalf
          p #[span.green Pros]:
          ul
            li Straightforward
            li No chance of corruption
        div.righthalf
          p #[span.red Cons]:
          ul
            li Delayed response
            li Inefficient
            li No priority control


      section
        h2 Responding to Changes
        h4 The Interrupt-driven Approach
        pre
          code.cpp.
            #define BUTTON_PIN 2;
            #define LED_PIN 13;

            volatile uint8_t pinState = LOW;

            void setup() {
              pinMode(LED_PIN, OUTPUT);
              pinMode(BUTTON_PIN, INPUT_PULLUP);
              attachInterrupt(digitalPinToInterrupt(BUTTON_PIN), toggle, CHANGE);
            }

            void loop() {
              digitalWrite(LED_PIN, pinState);
            }

            void toggle() {
              pinState = !pinState;
            }

      section
        h2 Two kinds of Interrupts
        p #[span.ino-orange Internally triggered] by system events
        ul
          li Timers, serial events, A/D complete, etc.
          li Arduino mostly handles these for us (#[code Serial, Wire])
        p #[span.ino-orange Externally triggered] by voltage changes on a pin
        ul
          li Pin-change interrupts (available on every GPIO pin)
          ul
            li Only fired on change, BYO logic to do more
          li Arduino pins 2, 3 (PD2/INT0, PD3/INT1) are special:
          ul
            li They have top priority
            li Dedicated HW to trigger on rise, fall, or change
            //- li Can even trigger continuously on low voltage
          li Both types are handled by "callbacks" called ISRs.


      section
        img(data-src="figs/interrupt-priorities.png")


      section
        h2 Interrupt Programming Guidelines:
        ul
          li Keep them short and sweet
          li put sensitive code (e.g. assignments) in a #[code noInterrupts()/interrupts()] block
          li (it's like AVR's ATOMIC_BLOCK, the most epic preprocessor definition ever)
          li Declare variables changed in interrupts as #[code volatile] so compiler doesn't optimize them away

      section
        p(style='text-align: center;') #[span.ino-teal #[strong When to use #[code delay()]?]]
        p #[span.ino-orange Not often.] #[code delay()] blocks everything but interrupts. It's especially bad with polling patterns.
        p Better to do something like this:
        pre
          code.cpp.
            unsigned long timeMarker = 0;
            const unsigned long dt = 20;
            void loop() {
              if (millis() - timeMarker >= dt) {
                timeMarker = millis();
                // Put code here that runs every dt milliseconds
              }
            }

        p Teensyduino has #[code elapsedMillis] and #[code elapsedMicros] timers, which account for code run time to keep a tight schedule

      section
        h2 AVR Programming in Arduino
        p Why defeat Arduino's hardware abstraction?
        div.lefthalf
          p #[span.green Pros]:
          ul
            li Fine-grained control
            li Significant performance gains
            li Transparency: WYSIWYG bare-metal code
        div.righthalf
          p #[span.red Cons]:
          ul
            li Non-portable
            li Looks esoteric
            li Mixing APIs


      section
        h2 ATMega328 PWM info
        p PWM pins:
        ul
          li 5, 6 (Timer 0)
          li 9, 10 (Timer 1)
          li 3, 11 (Timer 2)
        p Base frequencies:
        ul
          li 31350 Hz for pins 3, 9, 10, and 11
          li ~62.5 kHz for pins 5, 6
        p Default PWM frequencies:
        ul
          li 980 Hz - pins 5, 6
          li ~490 Hz - pins 9, 10, 3, 11


      section
        h2 ATMega328 PWM configuration

        p Let's say you wish to output a PWM frequency other than the default.

        p #[span.ino-orange Warning:] changing timers affects more than one pin, and can silently change built-in functions.

        p Reconfiguring Timer 1 does not affect millis() or delay() (but borks the Servo library)


      section
        h2 Speeding up GPIO
        h4 Direct register i/o versus arduino
        p AVR register R/W takes 1 instruction ($\lt$ 0.1 $\mu$s @ 16MHz)!
        p #[code.cpp digitalRead/Write] can take 50 cycles or more (4-5 us)
        p Timing comparison: toggle pin 4 from the CPU
        pre
          code.cpp.
            void loop() {
              digitalWrite(4, !digitalRead(4)); // 56.58 kHz on my scope
            }
             // vs.
            void loop() {
              PORTD ^= (1 << PD4); // 444.4 kHz, ~8x faster
            }

        aside.notes
          p A few us often doesn't matter, but this may be enough to get you through a hotspot in your code.
          p Why dR and dW are slow:
          ul
            li Function call overhead (stack address lookup)
            li Check if the pin is on a timer
            li Array lookup 1: integer pin number to port number (flash access)
            li Array lookup 2: port and pin number to register address (flash access)
          p see http://www.codeproject.com/Articles/589299/Why-is-the-digital-I-O-in-Arduino-slow-and-what-ca


      section
        h2 Math tips
        ul
          li always use #[code unsigned long] for timers
          //- li Know the meaning of built-in types, possibly using #[code.cpp int16_t] instead of int for clarity [TODO: look up data sizes for short, int, long, etc]
          li Floating-point math is slow and inefficient on AVRs (no hardware FPU).
          li Beware: some Arduino functions (e.g. p #[code.cpp map]) use integer division internally
          li Scale up your ints to keep precision:
        pre
          code.cpp.
            // convert ADC from a turnpot to an angle in degrees
            float angle = (float)map(adc, ADC_FULL_LEFT, ADC_FULL_RIGHT, 100*DEG_FULL_LEFT, 100*DEG_FULL_RIGHT)/100;

      section
        p(style='text-align: center;') #[span.ino-teal #[strong #[code analogRead] and Noise]]
        p Low-pass filtering is easily implemented in firmware! Consider the #[a(href="http://www.itl.nist.gov/div898/handbook/pmc/section4/pmc431.htm") EWMA ] for time-series ADC measurements $x_{t}$:
        p $$ S_t = \alpha x_{t−1} + (1−\alpha) S_{t−1}, \quad 0 \lt \alpha \leq 1. $$
        p Let's implement this with $\alpha = 1/16$ using integer math.
        p To improve precision, work with $16S_t$ instead of $S_t$:
        p $$ 16S_t = x_{t−1} + 16S_{t−1} - (16S_{t−1} - 16/2)/16 $$
        pre
          code.cpp.
            void ewma(unsigned int x, unsigned int &x16)
            {
              x16 = x + x16 - ((x16 - 8) >> 4);
            }
        p When using the measurement, simply divide by 16.


      section
        img(data-src="figs/adc.svg" width='100%')


      section
        h2 The Arduino CLI
        p I don't care much for Arduino as an IDE, and mainly just use it as a convenient toolchain. I have these in my .bashrc
        pre
          code.bash
            | alias arduino='/Applications/Arduino.app/Contents/MacOS/Arduino'
            | alias uno='arduino --board arduino:avr:uno'
            | alias nano='arduino --board arduino:avr:nano:cpu=atmega328'
            | alias t3='arduino --board teensy:avr:teensy31'
        p So I can do
        pre
          code.bash uno --port /dev/cu.usbmodem1234 --upload mysketch.ino
        p For serial coms, I use the venerable #[code screen] utility:
        pre
          code.bash screen /dev/cu.usbmodem 115200


      section
        h2 Takeaways
        ul
          li HW abstraction is a great thing...
          li But (judiciously) busting it is useful!
          li Stop thinking of your MCU as just a CPU with i/o pins! Program the timer/counters and interrupt system too.
          li Arduino is not dying out - the latest devices are still targeting the platform.

        p(style='text-align: center;') Thanks!!
